<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It's Null?</title>
    <atom:link href="http://itsnull.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://itsnull.com</link>
    <description>Phrase heard round the world</description>
    <pubDate>Tue, 07 Jan 2014 19:00:00 -0500</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>My preferred RequireJS syntax</title>
      <link>http://itsnull.com/articles/preferred-requirejs-syntax/</link>
      <pubDate>Tue, 07 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/preferred-requirejs-syntax/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been working with Durandal lately, which means I’m using RequireJS. Almost all of the RequireJS module definition examples will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;'durandal/app'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'durandal/system'&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(app, system)&lt;/span&gt; {&lt;/span&gt;
  app.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;);
  system.log(&lt;span class=&quot;string&quot;&gt;'myMessage'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me introduce you to my preferred RequireJS syntax…
&lt;span class=&quot;more&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(require)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = require(&lt;span class=&quot;string&quot;&gt;'durandal/app'&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; system = require(&lt;span class=&quot;string&quot;&gt;'durandal/system'&lt;/span&gt;);

  app.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;);
  system.log(&lt;span class=&quot;string&quot;&gt;'myMessage'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, why do I prefer this syntax? I avoid the need to match up argument orders, between the dependencies array and the callback function. Or more specifically, I avoid the incomprehensible errors that would other occur when i later add, remove, re-order a dependency in one list but forget to do it in the other list. Yes, my syntax has more lines of code, but no more than you’d see in other languages that have built-in modules (e.g. import statement in Python, C#, Java, #include in C++). I don’t see this syntax mentioned enough, so I thought it worthwhile to blog about it.&lt;/p&gt;
&lt;h3 id=&quot;warning-deep-dive-ahead&quot;&gt;Warning: Deep Dive Ahead&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Some of you may wonder how that second syntax is able to work, since RequireJS isn’t supposed to execute your callback function until all of your dependencies have been loaded. How’s it supposed to do that, if your dependencies are retrieved by calling the require function only when your callback is executed? &lt;em&gt;Is a time machine involved?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No, this syntax is known as Sugar syntax in RequireJS parlance. What happens in the define function is that it will ask for the string version of your callback function and it then runs regular expressions against that string looking for require(‘[module name here]’) and then it simply assumes you had passed it a dependencies array &lt;em&gt;(e.g. the first argument to define in my first example)&lt;/em&gt; containing those matches. On JsFiddle, I’ve created &lt;a href=&quot;http://jsfiddle.net/M2LcB/&quot;&gt;proof that you can ask for any function as a string&lt;/a&gt;. And that is that.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>From Wordpress to Wintersmith</title>
      <link>http://itsnull.com/articles/newblog-location/</link>
      <pubDate>Mon, 06 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/newblog-location/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve always wanted to be able to write my blog entries in Markdown, instead of using the Wordpress editor. What can I say, I really like Markdown. I had considered writing my own small blog engine that converted Markdown to HTML. But then there goes any free time I might have had. Plus, I would have to find a hosting provider. So, there my blog was stuck on Wordpress. Or so, I thought until I read a post by Phil Haack about &lt;a href=&quot;http://haacked.com/archive/2013/12/02/dr-jekyll-and-mr-haack/&quot;&gt;converting his blog&lt;/a&gt; to run on GitHub pages.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;After reading his post, I was pretty excited. The ability to write posts in Markdown. Using GitHub pages for free hosting. The whole site is statically generated, so if I needed to move to a paid hosting provider down the road, that would be easy. But then, I started reading up on both Jekyll and Octopress. They looked like they might be a pain to run on Windows &lt;em&gt;(repeat, looked like, I didn’t try it, I’m probably wrong)&lt;/em&gt;. They are written in Ruby, which I don’t have a ton of experience in. But I do a ton of JS development. So, I thought maybe there’s an equivalent to Jekyll and Octopress written in JS, using nodejs.  So, I went searching…&lt;/p&gt;
&lt;p&gt;Turns out there are a couple static site generators written using nodejs. &lt;em&gt;(I won’t list them, I’m sure more will be created, such is the current state of the Node community)&lt;/em&gt; I found one I liked called &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;. And you can see, my blog is now running on GitHub pages and was generated using Wintersmith. I’m quite happy with the results and quite enjoyed writing this post in &lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad2&lt;/a&gt;. Also, enjoyed previewing my entire blog on my local machine using &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wintersmith preview&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did not convert my old posts on Wordpress over to Wintersmith. Something for the next brave convert to Wintersmith, maybe. You can find my old posts at &lt;a href=&quot;http://itsnull.wordpress.com/&quot;&gt;http://itsnull.wordpress.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Old Blog still on wordpress.com</title>
      <link>http://itsnull.com/articles/oldblog-location/</link>
      <pubDate>Mon, 06 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/oldblog-location/</guid>
      <author></author>
      <description>&lt;p&gt;If you are looking for one of my older blog entries, those can still be found on &lt;a href=&quot;http://itsnull.wordpress.com/&quot;&gt;http://itsnull.wordpress.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>