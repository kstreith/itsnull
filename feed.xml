<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It's Null?</title>
    <atom:link href="http://itsnull.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://itsnull.com</link>
    <description>Phrase heard round the world</description>
    <pubDate>Thu, 26 Oct 2017 20:00:00 -0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Presenting &quot;Developer Tools for the Browser - Level Up!&quot;</title>
      <link>http://itsnull.com/articles/netConfLocal2017/</link>
      <pubDate>Thu, 26 Oct 2017 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/netConfLocal2017/</guid>
      <author></author>
      <description>&lt;p&gt;I’m presenting &lt;a href=&quot;https://www.meetup.com/TRINUG/events/242985614/&quot;&gt;Raleigh .NET Conf Local 2017&lt;/a&gt; this weekend, October 28th, 2017.&lt;/p&gt;
&lt;p&gt;I’m excited to be presenting on Developer Tools in the Web Browser. We will cover a bunch of content. Come learn how to use the developer tools for debugging and prototyping. But also how to use the dev tools to learn new web features and most importantly how to have empathy for your users and develop better web applications. It covers a wide variety of techniques, from beginners to experts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href=&quot;http://itsnull.com/presentations/devtools2017/&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun learning!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Section for talks</title>
      <link>http://itsnull.com/articles/talks/</link>
      <pubDate>Sat, 29 Apr 2017 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/talks/</guid>
      <author></author>
      <description>&lt;p&gt;I now have a dedicated section for &lt;a href=&quot;http://itsnull.com/talks/&quot;&gt;Talks&lt;/a&gt; at the top of the navigation. That has been updated to include my talks on ASP.NET Core this year. It also includes my talks from 2016, including Javascript Async Patterns, Behind the Scenes of A Modern Web App and Converting a Web App to ASP.NET Core.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;br&gt;Check out the slides and associated code, lots of good stuff there.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Global Azure Bootcamp 2017</title>
      <link>http://itsnull.com/articles/gab2017/</link>
      <pubDate>Fri, 28 Apr 2017 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/gab2017/</guid>
      <author></author>
      <description>&lt;p&gt;I presented at &lt;a href=&quot;https://www.meetup.com/TRINUG/events/237900403/&quot;&gt;Raleigh-Durham Global Azure Bootcamp&lt;/a&gt; last weekend, April 22nd, 2017. I had a blast and the other presentations were great.   &lt;/p&gt;
&lt;p&gt;My talk was on Azure Container Service. Azure Container Service can be broken down into three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Containers: packaged version of an application with all dependencies, commonly a &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container.&lt;/li&gt;
&lt;li&gt;Container Service: otherwise known as a container orchestrator. This is software that manages a cluster of machines and can spin up running instances of software from a container image. You get features like auto-scaling, self-healing, versioned deployments, rolling deployments. These features work for any software that can be packaged into a container.&lt;/li&gt;
&lt;li&gt;Azure: normally getting started using an container orchestrator can be a bit painful since you have to have the cluster of machines, you have to install the software and configure the cluster. This is where &lt;a href=&quot;https://azure.microsoft.com/en-us/services/container-service/&quot;&gt;Azure Container Service&lt;/a&gt; comes in, you can run a single command using the Azure CLI 2.0 and create a cluster using one of three container orchestrators.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My presentation includes a sample ASP.NET Core application I wrote and packaged into a container on &lt;a href=&quot;https://hub.docker.com/r/kstreith/acs-gab-demo/&quot;&gt;Docker Hub&lt;/a&gt;. Follow the presentation and create your own cluster and try out rolling deployments, self-healing, replication in your own Azure account or create a free trial Azure account.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href=&quot;http://itsnull.com/presentations/acs/&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun learning!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Learn C# 6 - By Example</title>
      <link>http://itsnull.com/articles/learn-csharp6/</link>
      <pubDate>Thu, 15 Oct 2015 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/learn-csharp6/</guid>
      <author></author>
      <description>&lt;p&gt;I’m presenting at Code Camp 2015. Pretty excited, it’s my second year presenting. I’ll be talking about the new C# features, along with some demos.&lt;/p&gt;
&lt;p&gt;You can find my slides and demo code on-line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href=&quot;http://itsnull.com/presentations/csharp6/#/&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code: &lt;a href=&quot;https://github.com/kstreith/csharp6&quot;&gt;On GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to use these presentations and code to get your team at work up to speed on C# 6.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Some of my 2015 presentations</title>
      <link>http://itsnull.com/articles/2015presentations/</link>
      <pubDate>Wed, 14 Oct 2015 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/2015presentations/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve done 3 presentations for &lt;a href=&quot;http://www.trinug.org/&quot;&gt;TRINUG&lt;/a&gt; earlier in 2015. Now, I’ll finally get around to posting links to those presentations. Better late then never…&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debugging Javascript In The Browser&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href=&quot;http://itsnull.com/presentations/debuggingjs/&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code: &lt;a href=&quot;https://github.com/kstreith/js-debugging-samples&quot;&gt;On GitHub&lt;/a&gt; This is broken JS code with hints on the page about what is broken. Useful for practicing your debugging skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Diving Into Microsoft Open source&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides: &lt;a href=&quot;http://itsnull.com/presentations/diving-into-ms-opensource/&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code: Download the open-source Microsoft code (see slides for links) and read it, seriously reading source code is good for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Learning JS Presentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides: No slides for this. Presentation was about learning JS by reading existing open-source JS code&lt;/li&gt;
&lt;li&gt;Code: &lt;a href=&quot;https://github.com/kstreith/learning-js&quot;&gt;On GitHub&lt;/a&gt; Repository has some sample pages using small javascript libraries along with guidance on how to start learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope these resources help.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Visual Studio Tips - TRINUG Lightning Talk</title>
      <link>http://itsnull.com/articles/vstips-trinug2014/</link>
      <pubDate>Wed, 10 Dec 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/vstips-trinug2014/</guid>
      <author></author>
      <description>&lt;p&gt;Went to the &lt;a href=&quot;http://www.trinug.org/&quot;&gt;TRINUG&lt;/a&gt; Potluck and Lightning Talks Meetup last night. Lots of awesome presentations! I did a short lightning talk about some tips for Visual Studio. I covered 3 tips in 5 minutes, which is pretty quick. So, I wanted to discuss them again in long form here.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;ctrl-vs-2013-and-later&quot;&gt;Ctrl+, VS 2013 and later&lt;/h1&gt;
&lt;p&gt;If you are using Visual Studio 2013 or later, you should be using the Ctrl+, keyboard shortcut. What it allows you to do is quickly open a file from the solution using just your keyboard. You don’t have to mouse over to Solution Explorer and inevitably forget what folder that file was in. And it’s very fast to use. I use it all the time and recommend you give it a try. I have a short video below showing me use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ctrl-comma.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; This shortcut works in earlier versions of Visual Studio, but is much more cumbersome to use. You can read about all of the &lt;a href=&quot;http://blogs.msdn.com/b/mvpawardprogram/archive/2013/10/22/visual-studio-2013-navigate-to-improvements.aspx&quot;&gt;nice improvements made in VS 2013&lt;/a&gt;, which is why I can now recommend using this shortcut. If you have Resharper installed you might notice a conflict since both use that key sequence, so you’ll have to be sure and pick the Visual Studio capability.&lt;/p&gt;
&lt;h1 id=&quot;tracepoints&quot;&gt;Tracepoints&lt;/h1&gt;
&lt;p&gt;Breakpoints are great, right? Until they aren’t. What I mean by that is they are great for inspecting the state of your application but it also means you have to hard stop your application and then resume once you’re done checking application state.&lt;/p&gt;
&lt;p&gt;Well, in turns out you don’t have to hard stop the application, you can turn your breakpoint into a tracepoint. This allows you print a message to the Debug Output window (e.g. use the Output window and select “Debug” from the dropdown) and continue on without stopping the breakpoint. Tracepoints have been in Visual Studio since 2005 and are supported across a variety of languages and application types. I have a short video below demonstrating it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tracepoint.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;More details on this feature on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/232dxah7%28v=vs.100%29.aspx&quot;&gt;MSDN&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;finding-caught-exceptions&quot;&gt;Finding caught exceptions&lt;/h1&gt;
&lt;p&gt;Ever suspect an exception is being thrown but you can’t seem to find it? For instance, you suspect a SqlException is being thrown and you also suspect another developer on your team put a catch clause somewhere and forgot to log the exception. We’ll since that other developer put that catch clause in there, good luck finding that exception. Or, maybe you can find it.&lt;/p&gt;
&lt;p&gt;If you go the Debug Output window (e.g. use the Output window and select “Debug” from the dropdown) you can right-click and enable “Exception messages”. This will then print a message when an exception is thrown. This will help confirm your suspicions but other than that it isn’t very useful.&lt;/p&gt;
&lt;p&gt;What is useful, is that you can go the Exceptions dialog (e.g. Debug\Exceptions… in the Visual studio menu) and then check the “Thrown” checkbox in that dialog for the exception(s) you are interested in. Once the “Thrown” checkbox is checked, the Visual Studio debugger will now stop at the point an exception is thrown, even if later the exception is caught somewhere else. And so now you can find that hidden SqlException. This feature has been in the Visual Studio debugger since 2003.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/exceptions.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;More details on this feature on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/d14azbfh.aspx&quot;&gt;MSDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And lastly, all of the code in the videos you see above is part of the TRINUG Web App that was built during the 2014 series of Hands On labs about MVC. So, many thanks to the numerous people who worked on those presentations and the code for the app. You can find the code and labs on &lt;a href=&quot;https://github.com/robzelt/IntroMvcDemo&quot;&gt;GitHub&lt;/a&gt;. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Raleigh Code Camp 2014</title>
      <link>http://itsnull.com/articles/codecamp2014/</link>
      <pubDate>Thu, 06 Nov 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/codecamp2014/</guid>
      <author></author>
      <description>&lt;p&gt;I’m doing a presentation on Debugging Javascript In the Browser at &lt;a href=&quot;http://codecamp.org/Raleigh&quot;&gt;Raleigh Code Camp&lt;/a&gt;, 11/8/2014. You can &lt;a href=&quot;http://itsnull.com/presentations/codecamp2014/#/&quot;&gt;view the slides&lt;/a&gt; or find the &lt;a href=&quot;https://github.com/kstreith/itsnull/tree/gh-pages/presentations/codecamp2014/codesamples&quot;&gt;source on Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>It's time to start using ES5 in your javascript code, actually it's past time</title>
      <link>http://itsnull.com/articles/start-using-es5/</link>
      <pubDate>Fri, 07 Feb 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/start-using-es5/</guid>
      <author></author>
      <description>&lt;p&gt;If you don’t know, ES5 is the EcmaScript5 specification, otherwise known as version 5 of the Javascript specification. Why should you use it? Because the spec has been out long enough (&lt;em&gt;since 2009&lt;/em&gt;) to be very well supported across a wide swath of browsers and browser versions.&lt;/p&gt;
&lt;p&gt;Let’s look at some code you can write now with ES5 that you probably used third-party libraries for in the past.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Built-in Map function&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [{id: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'cat'&lt;/span&gt;}, {id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'dog'&lt;/span&gt;}];
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = $.map(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.name; });
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = _.map(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.name; });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = arr.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.name; });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Built-in Filter function&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [{id: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'cat'&lt;/span&gt;}, {id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'dog'&lt;/span&gt;}];
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startsWithC = $.map(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (arr.name.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ? arr : &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;; });
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startsWithC = _.filter(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!(arr.name.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startsWithC = arr.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!(arr.name.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Built-in Iteration&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  $.each(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) { process(item); } });
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  _.each(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) { process(item); } });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  arr.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) { process(item); } });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, my two personal favorites:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Function binding&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = {
     likeCount: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
     like: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.like = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.like + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; }
  };
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundLike = $.proxy(person.like, person);
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundLike = _.bind(person.like, person);

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundLike = person.like.bind(person);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Iterating the keys of an object&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observablesOnObject = [];
  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; myObj) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myObj.hasOwnProperty(key)) {
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ko.isObservable(myObj[key])) {
        observablesOnObject.push(key);
      }
    }
  } 
&lt;span class=&quot;comment&quot;&gt;//OR THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observablesOnObject = _.filter(_.keys(myObj), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ko.isObservable(myObj(item)); });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observablesOnObject = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(myObj).filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ko.isObservable(myObj(item)); });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you might say, that didn’t change much. And that’s true. Those functions are so useful that can find them in quite a few JS libraries or hand-written into application code-bases. And that my friend is why those functions got added to the EcmaScript5 specification and therefore built into the language. So, now you can use these functions without adding a third-party dependency. Very helpful if you like to re-use code between projects. And if someone reads your code, they don’t have to go look up the documentation for the third-party library. Sounds good so far, right…&lt;/p&gt;
&lt;p&gt;But… But…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But, I have to support an old browser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you checked the &lt;a href=&quot;http://kangax.github.io/es5-compat-table/&quot;&gt;ES5 compat table&lt;/a&gt; and noticed the browser you have to support is missing these functions &lt;em&gt;(I’m looking at you IE8)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can solve that problem, go get the &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;ES5-shim library&lt;/a&gt;. For those who say, but now I have JQuery and ES5 shim. Well, that’s true. But in the future when you stop supporting that old browser, just drop ES5 shim. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But, the ES5 function doesn’t work the same as the function in my favorite library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, that’s a very keen eye or some great unit tests. Nobody says you have to stop using your favorite library, nobody says you have to stop using your favorite function. You are writing the code, not me, you have lots of options. This is just another option, pick the best option for your code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In closing&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Go read the &lt;a href=&quot;http://kangax.github.io/es5-compat-table/&quot;&gt;list of newly available functions&lt;/a&gt; &lt;em&gt;(and &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;shim support&lt;/a&gt; for those supporting old browers)&lt;/em&gt; and see if any will work for you and your projects.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>My preferred RequireJS syntax</title>
      <link>http://itsnull.com/articles/preferred-requirejs-syntax/</link>
      <pubDate>Tue, 07 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/preferred-requirejs-syntax/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been working with Durandal lately, which means I’m using RequireJS. Almost all of the RequireJS module definition examples will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;'durandal/app'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'durandal/system'&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;app, system&lt;/span&gt;) &lt;/span&gt;{
  app.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;);
  system.log(&lt;span class=&quot;string&quot;&gt;'myMessage'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me introduce you to my preferred RequireJS syntax…
&lt;span class=&quot;more&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'durandal/app'&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; system = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'durandal/system'&lt;/span&gt;);

  app.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;);
  system.log(&lt;span class=&quot;string&quot;&gt;'myMessage'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, why do I prefer this syntax? I avoid the need to match up argument orders, between the dependencies array and the callback function. Or more specifically, I avoid the incomprehensible errors that would other occur when i later add, remove, re-order a dependency in one list but forget to do it in the other list. Yes, my syntax has more lines of code, but no more than you’d see in other languages that have built-in modules (e.g. import statement in Python, C#, Java, #include in C++). I don’t see this syntax mentioned enough, so I thought it worthwhile to blog about it.&lt;/p&gt;
&lt;h3 id=&quot;warning-deep-dive-ahead&quot;&gt;Warning: Deep Dive Ahead&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Some of you may wonder how that second syntax is able to work, since RequireJS isn’t supposed to execute your callback function until all of your dependencies have been loaded. How’s it supposed to do that, if your dependencies are retrieved by calling the require function only when your callback is executed? &lt;em&gt;Is a time machine involved?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No, this syntax is known as Sugar syntax in RequireJS parlance. What happens in the define function is that it will ask for the string version of your callback function and it then runs regular expressions against that string looking for require(‘[module name here]’) and then it simply assumes you had passed it a dependencies array &lt;em&gt;(e.g. the first argument to define in my first example)&lt;/em&gt; containing those matches. On JsFiddle, I’ve created &lt;a href=&quot;http://jsfiddle.net/M2LcB/&quot;&gt;proof that you can ask for any function as a string&lt;/a&gt;. And that is that.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Old Blog still on wordpress.com</title>
      <link>http://itsnull.com/articles/oldblog-location/</link>
      <pubDate>Mon, 06 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/oldblog-location/</guid>
      <author></author>
      <description>&lt;p&gt;If you are looking for one of my older blog entries, those can still be found on &lt;a href=&quot;http://itsnull.wordpress.com/&quot;&gt;http://itsnull.wordpress.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>From Wordpress to Wintersmith</title>
      <link>http://itsnull.com/articles/newblog-location/</link>
      <pubDate>Mon, 06 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/newblog-location/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve always wanted to be able to write my blog entries in Markdown, instead of using the Wordpress editor. What can I say, I really like Markdown. I had considered writing my own small blog engine that converted Markdown to HTML. But then there goes any free time I might have had. Plus, I would have to find a hosting provider. So, there my blog was stuck on Wordpress. Or so, I thought until I read a post by Phil Haack about &lt;a href=&quot;http://haacked.com/archive/2013/12/02/dr-jekyll-and-mr-haack/&quot;&gt;converting his blog&lt;/a&gt; to run on GitHub pages.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;After reading his post, I was pretty excited. The ability to write posts in Markdown. Using GitHub pages for free hosting. The whole site is statically generated, so if I needed to move to a paid hosting provider down the road, that would be easy. But then, I started reading up on both Jekyll and Octopress. They looked like they might be a pain to run on Windows &lt;em&gt;(repeat, looked like, I didn’t try it, I’m probably wrong)&lt;/em&gt;. They are written in Ruby, which I don’t have a ton of experience in. But I do a ton of JS development. So, I thought maybe there’s an equivalent to Jekyll and Octopress written in JS, using nodejs.  So, I went searching…&lt;/p&gt;
&lt;p&gt;Turns out there are a couple static site generators written using nodejs. &lt;em&gt;(I won’t list them, I’m sure more will be created, such is the current state of the Node community)&lt;/em&gt; I found one I liked called &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;. And you can see, my blog is now running on GitHub pages and was generated using Wintersmith. I’m quite happy with the results and quite enjoyed writing this post in &lt;a href=&quot;http://markdownpad.com&quot;&gt;MarkdownPad2&lt;/a&gt;. Also, enjoyed previewing my entire blog on my local machine using &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wintersmith preview&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did not convert my old posts on Wordpress over to Wintersmith. Something for the next brave convert to Wintersmith, maybe. You can find my old posts at &lt;a href=&quot;http://itsnull.wordpress.com/&quot;&gt;http://itsnull.wordpress.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>