<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>It's Null?</title>
    <atom:link href="http://itsnull.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://itsnull.com</link>
    <description>Phrase heard round the world</description>
    <pubDate>Thu, 06 Nov 2014 19:00:00 -0500</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Raleigh Code Camp 2014</title>
      <link>http://itsnull.com/articles/codecamp2014/</link>
      <pubDate>Thu, 06 Nov 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/codecamp2014/</guid>
      <author></author>
      <description>&lt;p&gt;I’m doing a presentation on Debugging Javascript In the Browser at &lt;a href=&quot;http://codecamp.org/Raleigh&quot;&gt;Raleigh Code Camp&lt;/a&gt;, 11/8/2014. You can &lt;a href=&quot;http://itsnull.com/presentations/codecamp2014/#/&quot;&gt;view the slides&lt;/a&gt; or find the &lt;a href=&quot;https://github.com/kstreith/itsnull/tree/gh-pages/presentations/codecamp2014/codesamples&quot;&gt;source on Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>It's time to start using ES5 in your javascript code, actually it's past time</title>
      <link>http://itsnull.com/articles/start-using-es5/</link>
      <pubDate>Fri, 07 Feb 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/start-using-es5/</guid>
      <author></author>
      <description>&lt;p&gt;If you don’t know, ES5 is the EcmaScript5 specification, otherwise known as version 5 of the Javascript specification. Why should you use it? Because the spec has been out long enough (&lt;em&gt;since 2009&lt;/em&gt;) to be very well supported across a wide swath of browsers and browser versions.&lt;/p&gt;
&lt;p&gt;Let’s look at some code you can write now with ES5 that you probably used third-party libraries for in the past.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Built-in Map function&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [{id: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'cat'&lt;/span&gt;}, {id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'dog'&lt;/span&gt;}];
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = $.map(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.name; });
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = _.map(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.name; });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; names = arr.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr.name; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Built-in Filter function&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [{id: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'cat'&lt;/span&gt;}, {id: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;'dog'&lt;/span&gt;}];
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startsWithC = $.map(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (arr.name.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ? arr : &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;; });
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startsWithC = _.filter(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!(arr.name.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startsWithC = arr.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!(arr.name.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Built-in Iteration&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  $.each(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) { process(item); } });
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  _.each(arr, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) { process(item); } });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  arr.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) { process(item); } });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, my two personal favorites:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Function binding&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = {
     likeCount: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
     like: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.like = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.like + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; }
  };
&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS JQuery&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundLike = $.proxy(person.like, person);
&lt;span class=&quot;comment&quot;&gt;//OR, REPLACE THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundLike = _.bind(person.like, person);

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boundLike = person.like.bind(person);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Iterating the keys of an object&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//REPLACE THIS&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observablesOnObject = [];
  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; myObj) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myObj.hasOwnProperty(key)) {
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ko.isObservable(myObj[key])) {
        observablesOnObject.push(key);
      }
    }
  } 
&lt;span class=&quot;comment&quot;&gt;//OR THIS Underscore/LoDash&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observablesOnObject = _.filter(_.keys(myObj), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ko.isObservable(myObj(item)); });

&lt;span class=&quot;comment&quot;&gt;//WITH&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observablesOnObject = Object.keys(myObj).filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(item)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ko.isObservable(myObj(item)); });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you might say, that didn’t change much. And that’s true. Those functions are so useful that can find them in quite a few JS libraries or hand-written into application code-bases. And that my friend is why those functions got added to the EcmaScript5 specification and therefore built into the language. So, now you can use these functions without adding a third-party dependency. Very helpful if you like to re-use code between projects. And if someone reads your code, they don’t have to go look up the documentation for the third-party library. Sounds good so far, right…&lt;/p&gt;
&lt;p&gt;But… But…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But, I have to support an old browser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you checked the &lt;a href=&quot;http://kangax.github.io/es5-compat-table/&quot;&gt;ES5 compat table&lt;/a&gt; and noticed the browser you have to support is missing these functions &lt;em&gt;(I’m looking at you IE8)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can solve that problem, go get the &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;ES5-shim library&lt;/a&gt;. For those who say, but now I have JQuery and ES5 shim. Well, that’s true. But in the future when you stop supporting that old browser, just drop ES5 shim. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But, the ES5 function doesn’t work the same as the function in my favorite library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, that’s a very keen eye or some great unit tests. Nobody says you have to stop using your favorite library, nobody says you have to stop using your favorite function. You are writing the code, not me, you have lots of options. This is just another option, pick the best option for your code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In closing&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Go read the &lt;a href=&quot;http://kangax.github.io/es5-compat-table/&quot;&gt;list of newly available functions&lt;/a&gt; &lt;em&gt;(and &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;shim support&lt;/a&gt; for those supporting old browers)&lt;/em&gt; and see if any will work for you and your projects.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>My preferred RequireJS syntax</title>
      <link>http://itsnull.com/articles/preferred-requirejs-syntax/</link>
      <pubDate>Tue, 07 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/preferred-requirejs-syntax/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been working with Durandal lately, which means I’m using RequireJS. Almost all of the RequireJS module definition examples will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;define([&lt;span class=&quot;string&quot;&gt;'durandal/app'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'durandal/system'&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(app, system)&lt;/span&gt; {&lt;/span&gt;
  app.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;);
  system.log(&lt;span class=&quot;string&quot;&gt;'myMessage'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me introduce you to my preferred RequireJS syntax…
&lt;span class=&quot;more&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(require)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = require(&lt;span class=&quot;string&quot;&gt;'durandal/app'&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; system = require(&lt;span class=&quot;string&quot;&gt;'durandal/system'&lt;/span&gt;);

  app.trigger(&lt;span class=&quot;string&quot;&gt;'myEvent'&lt;/span&gt;);
  system.log(&lt;span class=&quot;string&quot;&gt;'myMessage'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, why do I prefer this syntax? I avoid the need to match up argument orders, between the dependencies array and the callback function. Or more specifically, I avoid the incomprehensible errors that would other occur when i later add, remove, re-order a dependency in one list but forget to do it in the other list. Yes, my syntax has more lines of code, but no more than you’d see in other languages that have built-in modules (e.g. import statement in Python, C#, Java, #include in C++). I don’t see this syntax mentioned enough, so I thought it worthwhile to blog about it.&lt;/p&gt;
&lt;h3 id=&quot;warning-deep-dive-ahead&quot;&gt;Warning: Deep Dive Ahead&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Some of you may wonder how that second syntax is able to work, since RequireJS isn’t supposed to execute your callback function until all of your dependencies have been loaded. How’s it supposed to do that, if your dependencies are retrieved by calling the require function only when your callback is executed? &lt;em&gt;Is a time machine involved?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No, this syntax is known as Sugar syntax in RequireJS parlance. What happens in the define function is that it will ask for the string version of your callback function and it then runs regular expressions against that string looking for require(‘[module name here]’) and then it simply assumes you had passed it a dependencies array &lt;em&gt;(e.g. the first argument to define in my first example)&lt;/em&gt; containing those matches. On JsFiddle, I’ve created &lt;a href=&quot;http://jsfiddle.net/M2LcB/&quot;&gt;proof that you can ask for any function as a string&lt;/a&gt;. And that is that.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Old Blog still on wordpress.com</title>
      <link>http://itsnull.com/articles/oldblog-location/</link>
      <pubDate>Mon, 06 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/oldblog-location/</guid>
      <author></author>
      <description>&lt;p&gt;If you are looking for one of my older blog entries, those can still be found on &lt;a href=&quot;http://itsnull.wordpress.com/&quot;&gt;http://itsnull.wordpress.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>From Wordpress to Wintersmith</title>
      <link>http://itsnull.com/articles/newblog-location/</link>
      <pubDate>Mon, 06 Jan 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://itsnull.com/articles/newblog-location/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve always wanted to be able to write my blog entries in Markdown, instead of using the Wordpress editor. What can I say, I really like Markdown. I had considered writing my own small blog engine that converted Markdown to HTML. But then there goes any free time I might have had. Plus, I would have to find a hosting provider. So, there my blog was stuck on Wordpress. Or so, I thought until I read a post by Phil Haack about &lt;a href=&quot;http://haacked.com/archive/2013/12/02/dr-jekyll-and-mr-haack/&quot;&gt;converting his blog&lt;/a&gt; to run on GitHub pages.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/p&gt;
&lt;p&gt;After reading his post, I was pretty excited. The ability to write posts in Markdown. Using GitHub pages for free hosting. The whole site is statically generated, so if I needed to move to a paid hosting provider down the road, that would be easy. But then, I started reading up on both Jekyll and Octopress. They looked like they might be a pain to run on Windows &lt;em&gt;(repeat, looked like, I didn’t try it, I’m probably wrong)&lt;/em&gt;. They are written in Ruby, which I don’t have a ton of experience in. But I do a ton of JS development. So, I thought maybe there’s an equivalent to Jekyll and Octopress written in JS, using nodejs.  So, I went searching…&lt;/p&gt;
&lt;p&gt;Turns out there are a couple static site generators written using nodejs. &lt;em&gt;(I won’t list them, I’m sure more will be created, such is the current state of the Node community)&lt;/em&gt; I found one I liked called &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;. And you can see, my blog is now running on GitHub pages and was generated using Wintersmith. I’m quite happy with the results and quite enjoyed writing this post in &lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad2&lt;/a&gt;. Also, enjoyed previewing my entire blog on my local machine using &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wintersmith preview&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did not convert my old posts on Wordpress over to Wintersmith. Something for the next brave convert to Wintersmith, maybe. You can find my old posts at &lt;a href=&quot;http://itsnull.wordpress.com/&quot;&gt;http://itsnull.wordpress.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>